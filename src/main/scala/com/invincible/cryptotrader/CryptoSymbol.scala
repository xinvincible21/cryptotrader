package com.invincible.cryptotrader

object CryptoSymbol extends Enumeration {
  //crypto
  val Bitcoin = Value("btcusd")
  val Ether = Value("ethusd")
  val Zcash = Value("zecusd")
  val BitcoinCash = Value("bchusd")
  val Litecoin = Value("ltcusd")
  val BasicAttentionToken = Value("batusd")
  val Dai = Value("daiusd")
  val Chainlink = Value("linkusd")
  val Orchid = Value("oxtusd")
  val Amp = Value("ampusd")
  val Compound = Value("compusd")
  val PAXGold = Value("paxgusd")
  val Maker = Value("mkrusd")
  val Ox = Value("zrxusd")
  val KyberNetwork = Value("kncusd")
  val Decentraland = Value("manausd")
  val Storj = Value("storjusd")
  val Synthetix = Value("snxusd")
  val Curve = Value("crvusd")
  val Balancer = Value("balusd")
  val Uniswap = Value("uniusd")
  val Ren = Value("renusd")
  val Uma = Value("umausd")
  val Yearnfinance = Value("yfiusd")
  val AAVE = Value("aaveusd")
  val Filecoin = Value("filusd")
  val Skale = Value("sklusd")
  val OneINCH = Value("1inchusd")
  val ENJ = Value("enjusd")
  val Loopring = Value("lrcusd")
  val TheSandbox = Value("sandusd")
  val SomniumSpace = Value("cubeusd")
  val Livepeer = Value("lptusd")
  val Barnbridge = Value("bondusd")
  val Polygon = Value("maticusd")
  val InjectiveProtocol = Value("injusd")
  val Sushiswap = Value("sushiusd")
  val Dogecoin = Value("dogeusd")
  val AnkrNetwork = Value("ankrusd")
  val MirrorProtocol = Value("mirusd")
  val Alchemix = Value("alcxusd")
  val Fantom = Value("ftmusd")
  val Quant = Value("qntusd")
  val API3 = Value("api3usd")
  val Burn = Value("ashusd")
  val MagicInternetMoney = Value("mimusd")
  val SmoothLovePotion = Value("slpusd")
  val Audius = Value("audiousd")
  val Radicle = Value("radusd")
  val DogelonMars = Value("elonusd")
  val FetchAI = Value("fetusd")
  val MeritCircle = Value("mcusd")
  val Tezos = Value("xtzusd")
  val MaskNetwork = Value("maskusd")
  val WrappedCentrifuge = Value("wcfgusd")
  val AxieInfinity = Value("axsusd")
  val SpellToken = Value("spellusd")
  val CryptexFinance = Value("ctxusd")
  val MossCarbonCredit = Value("mco2usd")
  val Gala = Value("galausd")
  val Terra = Value("lunausd")
  val USDCoin = Value("usdcusd")
  val ShibaInu = Value("shibusd")
  val Keep3rV1 = Value("kp3rusd")
  val RenderToken = Value("rndrusd")
  val EthereumNameService = Value("ensusd")
  val Civic = Value("cvcusd")
  val SuperRare = Value("rareusd")
  val TerraUSD = Value("ustusd")
  val Numeraire = Value("nmrusd")
  val Rally = Value("rlyusd")
  val Tokemak = Value("tokeusd")
  val LidoDAOToken = Value("ldousd")
  val KRUSD = Value("krusd")
  val BoredApeYachtClub = Value("apeusd")
  val Raydium = Value("rayusd")
  val Saber = Value("sbrusd")
  val Solana = Value("solusd")
  val IndexCooperative = Value("indexusd")
  val RibbonFinance = Value("rbnusd")
  val Qredo = Value("qrdousd")
  val GeoJam = Value("jamusd")
  val Metis = Value("metisusd")
  val MapleFinance = Value("mplusd")
  val Liquity = Value("lqtyusd")
  val Chilliz = Value("chzusd")
  val DeFiPulseIndex = Value("dpiusd")
  val FraxShare = Value("fxsusd")
  val Frax = Value("fraxusd")
  val Stepn = Value("gmtusd")
  val ZebecProtocol = Value("zbcusd")
  val Bonafida = Value("fidausd")
  val Revv = Value("revvusd")

  //conversions
  val ETHBTC = Value("ethbtc")
  val ZECBTC = Value("zecbtc")
  val ZECETCH = Value("zeceth")
  val ZECBCH = Value("zecbch")
  val ZECLTC = Value("zecltc")
  val BCHBTC = Value("bchbtc")
  val BCHETH = Value("bcheth")
  val LTCBTC = Value("ltcbtc")
  val LTCETH = Value("ltceth")
  val LTCBCH = Value("ltcbch")
  val BATBTC = Value("batbtc")
  val LINKBTC = Value("linkbtc")
  val OXTBTC = Value("oxtbtc")
  val BATETH = Value("bateth")
  val LINKETCH = Value("linketh")
  val OTXTETH = Value("oxteth")
  val BTCDAI = Value("btcdai")
  val ETHDAI = Value("ethdai")
  val GRTUSD = Value("grtusd")
  val BTCEUR = Value("btceur")
  val BTCGBP = Value("btcgbp")
  val ETHEUR = Value("etheur")
  val ETCGBP = Value("ethgbp")
  val BTCSGD = Value("btcsgd")
  val ETHSGD = Value("ethsgd")
  val BNTUSD = Value("bntusd")
  val ETHGUSD = Value("ethgusd")
  val BTCGUSD = Value("btcgusd")
  val DOGEETH = Value("dogeeth")
  val DOGEBTC = Value("dogebtc")
  val GUSDSGD = Value("gusdsgd")
  val LUSDUSD = Value("lusdusd")

  def toCryptoSymbol(s:String) = CryptoSymbol.values.find(_.toString == s)
}

import CryptoSymbol._

class CryptoCurrency(name:String, Ticker:String, symbol:CryptoSymbol.Value)
case class Bitcoin() extends CryptoCurrency("Bitcoin","BTC",CryptoSymbol.Bitcoin)
case class Ether() extends CryptoCurrency("Ether","ETH",CryptoSymbol.Ether)
